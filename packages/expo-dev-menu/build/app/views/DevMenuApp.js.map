{"version":3,"file":"DevMenuApp.js","sourceRoot":"","sources":["../../../src/app/views/DevMenuApp.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC/D,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAmB,MAAM,yBAAyB,CAAC;AAC9F,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAGhD,OAAO,KAAK,eAAe,MAAM,oBAAoB,CAAC;AACtD,OAAO,iBAAiB,MAAM,8BAA8B,CAAC;AAC7D,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAEtD,SAAS,eAAe,CAAC,QAAQ;IAC/B,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAEnD,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,KAAK,UAAU,eAAe;YAC5B,MAAM,QAAQ,GAAG,MAAM,eAAe,CAAC,gBAAgB,EAAE,CAAC;YAC1D,WAAW,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC;QAED,eAAe,EAAE,CAAC;IACpB,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,KAAK,CAAC,aAAuB;IACpE,MAAM;QACJ,OAAO,oBAAC,UAAU,oBAAK,IAAI,CAAC,KAAK,EAAI,CAAC;IACxC,CAAC;CACF;AAED,MAAM,KAAK,GAAG,oBAAoB,EAAE,CAAC;AAErC,SAAS,UAAU,CAAC,KAAK;IACvB,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACrC,MAAM,EAAE,mBAAmB,GAAG,eAAe,EAAE,GAAG,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAE9E,IAAI,KAAK,GACP,mBAAmB,KAAK,eAAe,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,mBAAmB,CAAC;IAC9E,IAAI,KAAK,KAAK,eAAe,EAAE;QAC7B,KAAK,GAAG,OAAO,CAAC;KACjB;IAED,OAAO,CACL,oBAAC,mBAAmB;QAClB,oBAAC,kBAAkB,IAAC,KAAK,EAAE,MAAM,CAAC,QAAQ;YACxC,oBAAC,YAAY,CAAC,QAAQ,IAAC,KAAK,EAAE,KAAK;gBACjC,oBAAC,kBAAkB,oBAAK,KAAK;oBAC3B,oBAAC,KAAK,CAAC,SAAS,IAAC,gBAAgB,EAAC,MAAM,EAAC,UAAU,EAAC,OAAO,EAAC,IAAI,EAAC,OAAO;wBACtE,oBAAC,KAAK,CAAC,MAAM,IACX,IAAI,EAAC,MAAM,EACX,SAAS,EAAE,iBAAiB,EAC5B,OAAO,EAAE,iBAAiB,CAAC,iBAAiB,GAC5C,CACc,CACC,CACC,CACL,CACD,CACvB,CAAC;AACJ,CAAC;AAED,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,QAAQ,EAAE;QACR,IAAI,EAAE,CAAC;KACR;CACF,CAAC,CAAC","sourcesContent":["import { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport React from 'react';\nimport { StyleSheet } from 'react-native';\nimport { AppearanceProvider, useColorScheme, ColorSchemeName } from 'react-native-appearance';\nimport { ThemeContext } from 'react-navigation';\n\nimport DevMenuContext from '../DevMenuContext';\nimport * as DevMenuInternal from '../DevMenuInternal';\nimport DevMenuMainScreen from '../screens/DevMenuMainScreen';\nimport DevMenuBottomSheet from './DevMenuBottomSheet';\n\nfunction useUserSettings(renderId): DevMenuInternal.DevMenuSettingsType {\n  const [settings, setSettings] = React.useState({});\n\n  React.useEffect(() => {\n    async function getUserSettings() {\n      const settings = await DevMenuInternal.getSettingsAsync();\n      setSettings(settings);\n    }\n\n    getUserSettings();\n  }, [renderId]);\n\n  return settings;\n}\n\nexport default class DevMenuRoot extends React.PureComponent<any, any> {\n  render() {\n    return <DevMenuApp {...this.props} />;\n  }\n}\n\nconst Stack = createStackNavigator();\n\nfunction DevMenuApp(props) {\n  const colorScheme = useColorScheme();\n  const { preferredAppearance = 'no-preference' } = useUserSettings(props.uuid);\n\n  let theme: ColorSchemeName =\n    preferredAppearance === 'no-preference' ? colorScheme : preferredAppearance;\n  if (theme === 'no-preference') {\n    theme = 'light';\n  }\n\n  return (\n    <NavigationContainer>\n      <AppearanceProvider style={styles.rootView}>\n        <ThemeContext.Provider value={theme}>\n          <DevMenuBottomSheet {...props}>\n            <Stack.Navigator initialRouteName=\"Main\" headerMode=\"float\" mode=\"modal\">\n              <Stack.Screen\n                name=\"Main\"\n                component={DevMenuMainScreen}\n                options={DevMenuMainScreen.navigationOptions}\n              />\n            </Stack.Navigator>\n          </DevMenuBottomSheet>\n        </ThemeContext.Provider>\n      </AppearanceProvider>\n    </NavigationContainer>\n  );\n}\n\nconst styles = StyleSheet.create({\n  rootView: {\n    flex: 1,\n  },\n});\n"]}