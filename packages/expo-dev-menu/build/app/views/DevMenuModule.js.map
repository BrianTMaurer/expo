{"version":3,"file":"DevMenuModule.js","sourceRoot":"","sources":["../../../src/app/views/DevMenuModule.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAqB,MAAM,cAAc,CAAC;AAEpF,MAAM,YAAY,GAAG,aAAa,CAAC,cAAc,CAAC;AAClD,MAAM,OAAO,GAAG,aAAa,CAAC,mBAAmB,CAAC;AAelD,aAAa;AAEb,MAAM,CAAC,KAAK,UAAU,UAAU;IAC9B,OAAO,MAAM,OAAO,CAAC,cAAc,EAAE,CAAC;AACxC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB,CAAC,QAAgB;IACxD,OAAO,MAAM,OAAO,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACrD,CAAC;AAED,aAAa;AAEb,MAAM,CAAC,KAAK,UAAU,gBAAgB;IACpC,IAAI,CAAC,YAAY,CAAC,uBAAuB,EAAE;QACzC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,MAAM,YAAY,CAAC,uBAAuB,EAAE,CAAC;AACtD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,GAAG,EAAE,KAAK;IAC9C,MAAM,YAAY,CAAC,sBAAsB,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,kCAAkC;IACtD,OAAO,MAAM,YAAY,CAAC,kCAAkC,EAAE,CAAC;AACjE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,mBAAmB;IACvC,OAAO,MAAM,YAAY,CAAC,0BAA0B,EAAE,CAAC;AACzD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,yBAAyB;IAC7C,OAAO,MAAM,YAAY,CAAC,4BAA4B,EAAE,CAAC;AAC3D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,QAAiB;IAChE,MAAM,YAAY,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,GAAW;IACtD,MAAM,YAAY,CAAC,6BAA6B,CAAC,GAAG,CAAC,CAAC;AACxD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,cAAc;IAClC,MAAM,YAAY,CAAC,cAAc,EAAE,CAAC;AACtC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,aAAa;IACjC,MAAM,YAAY,CAAC,aAAa,EAAE,CAAC;AACrC,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,QAAoB;IACzD,OAAO,6BAA6B,CAAC,sCAAsC,EAAE,QAAQ,CAAC,CAAC;AACzF,CAAC;AAED,SAAS,6BAA6B,CAAC,SAAS,EAAE,aAAa;IAC7D,OAAO,kBAAkB,CAAC,WAAW,CAAC,SAAS,EAAE,KAAK,EAAC,KAAK,EAAC,EAAE;QAC7D,IAAI;YACF,IAAI,MAAM,GAAG,MAAM,aAAa,CAAC,KAAK,CAAC,CAAC;YACxC,IAAI,CAAC,MAAM,EAAE;gBACX,MAAM,GAAG,EAAE,CAAC;aACb;YACD,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;SACpD;QAAC,OAAO,CAAC,EAAE;YACV,YAAY,CAAC,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC;SACvD;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAED,eAAe,6BAA6B,CAAC","sourcesContent":["import { DeviceEventEmitter, NativeModules, EventSubscription } from 'react-native';\n\nconst NativeKernel = NativeModules.ExponentKernel;\nconst DevMenu = NativeModules.ExpoDevMenuInternal;\n\nexport type DevMenuSettings = {\n  devMenuSettings: null | {\n    motionGestureEnabled: boolean;\n    touchGestureEnabled: boolean;\n  };\n};\n\nexport type DevMenuItem = {\n  label: string;\n  isEnabled: boolean;\n  detail?: string;\n};\n\n/* New API */\n\nexport async function closeAsync(): Promise<void> {\n  return await DevMenu.closeMenuAsync();\n}\n\nexport async function dispatchActionAsync(actionId: string): Promise<void> {\n  return await DevMenu.dispatchActionAsync(actionId);\n}\n\n/* Old API */\n\nexport async function getSettingsAsync(): Promise<DevMenuSettings | null> {\n  if (!NativeKernel.getDevMenuSettingsAsync) {\n    return null;\n  }\n  return await NativeKernel.getDevMenuSettingsAsync();\n}\n\nexport async function setSettingAsync(key, value): Promise<void> {\n  await NativeKernel.setDevMenuSettingAsync(key, value);\n}\n\nexport async function doesCurrentTaskEnableDevtoolsAsync(): Promise<boolean> {\n  return await NativeKernel.doesCurrentTaskEnableDevtoolsAsync();\n}\n\nexport async function getItemsToShowAsync(): Promise<{ [key: string]: DevMenuItem }> {\n  return await NativeKernel.getDevMenuItemsToShowAsync();\n}\n\nexport async function isOnboardingFinishedAsync(): Promise<boolean> {\n  return await NativeKernel.getIsOnboardingFinishedAsync();\n}\n\nexport async function setOnboardingFinishedAsync(finished: boolean): Promise<void> {\n  await NativeKernel.setIsOnboardingFinishedAsync(finished);\n}\n\nexport async function selectItemWithKeyAsync(key: string): Promise<void> {\n  await NativeKernel.selectDevMenuItemWithKeyAsync(key);\n}\n\nexport async function reloadAppAsync(): Promise<void> {\n  await NativeKernel.reloadAppAsync();\n}\n\nexport async function goToHomeAsync(): Promise<void> {\n  await NativeKernel.goToHomeAsync();\n}\n\nexport function listenForCloseRequests(listener: () => void): EventSubscription {\n  return addListenerWithNativeCallback('ExponentKernel.requestToCloseDevMenu', listener);\n}\n\nfunction addListenerWithNativeCallback(eventName, eventListener): EventSubscription {\n  return DeviceEventEmitter.addListener(eventName, async event => {\n    try {\n      let result = await eventListener(event);\n      if (!result) {\n        result = {};\n      }\n      NativeKernel.onEventSuccess(event.eventId, result);\n    } catch (e) {\n      NativeKernel.onEventFailure(event.eventId, e.message);\n    }\n  });\n}\n\nexport default addListenerWithNativeCallback;\n"]}