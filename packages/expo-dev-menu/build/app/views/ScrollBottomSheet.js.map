{"version":3,"file":"ScrollBottomSheet.js","sourceRoot":"","sources":["../../../src/app/views/ScrollBottomSheet.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { Component, RefObject } from 'react';\nimport {\n  Dimensions,\n  FlatList,\n  FlatListProps,\n  Platform,\n  ScrollView,\n  ScrollViewProps,\n  SectionList,\n  SectionListProps,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Animated, {\n  abs,\n  add,\n  and,\n  call,\n  Clock,\n  clockRunning,\n  cond,\n  Easing,\n  eq,\n  event,\n  Extrapolate,\n  greaterOrEq,\n  greaterThan,\n  interpolate,\n  multiply,\n  not,\n  onChange,\n  or,\n  set,\n  startClock,\n  stopClock,\n  sub,\n  timing,\n  Value,\n} from 'react-native-reanimated';\nimport {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  PanGestureHandlerProperties,\n  State as GestureState,\n  TapGestureHandler,\n} from 'react-native-gesture-handler';\nimport { Assign } from 'utility-types';\n\nconst FlatListComponentType = 'FlatList' as const;\nconst ScrollViewComponentType = 'ScrollView' as const;\nconst SectionListComponentType = 'SectionList' as const;\n\nconst { height: windowHeight } = Dimensions.get('window');\nconst DRAG_TOSS = 0.05;\nconst IOS_NORMAL_DECELERATION_RATE = 0.998;\nconst ANDROID_NORMAL_DECELERATION_RATE = 0.985;\nconst DEFAULT_ANIMATION_DURATION = 250;\nconst DEFAULT_EASING = Easing.inOut(Easing.linear);\nconst imperativeScrollOptions = {\n  [FlatListComponentType]: {\n    method: 'scrollToIndex',\n    args: {\n      index: 0,\n      viewPosition: 0,\n      viewOffset: 1000,\n      animated: true,\n    },\n  },\n  [ScrollViewComponentType]: {\n    method: 'scrollTo',\n    args: {\n      x: 0,\n      y: 0,\n      animated: true,\n    },\n  },\n  [SectionListComponentType]: {\n    method: 'scrollToLocation',\n    args: {\n      itemIndex: 0,\n      sectionIndex: 0,\n      viewPosition: 0,\n      viewOffset: 1000,\n      animated: true,\n    },\n  },\n};\n\ntype AnimatedScrollableComponent = FlatList | ScrollView | SectionList;\n\ntype FlatListOption<T> = Assign<{ componentType: typeof FlatListComponentType }, FlatListProps<T>>;\ntype ScrollViewOption = Assign<{ componentType: typeof ScrollViewComponentType }, ScrollViewProps>;\ntype SectionListOption<T> = Assign<\n  { componentType: typeof SectionListComponentType },\n  SectionListProps<T>\n>;\n\ninterface TimingParams {\n  clock: Animated.Clock;\n  from: Animated.Node<number>;\n  to: Animated.Node<number>;\n  position: Animated.Value<number>;\n  finished: Animated.Value<number>;\n  frameTime: Animated.Value<number>;\n}\n\ntype CommonProps = {\n  /**\n   * Array of numbers that indicate the different resting positions of the bottom sheet (in dp or %), starting from the top.\n   * If a percentage is used, that would translate to the relative amount of the total window height.\n   * For instance, if 50% is used, that'd be windowHeight * 0.5. If you wanna take into account safe areas during\n   * the calculation, such as status bars and notches, please use 'topInset' prop\n   */\n  snapPoints: Array<string | number>;\n  /**\n   * Index that references the initial resting position of the drawer, starting from the top\n   */\n  initialSnapIndex: number;\n  /**\n   * Render prop for the handle\n   */\n  renderHandle: () => React.ReactNode;\n  /**\n   * Callback that is executed right after the drawer settles on one of the snapping points.\n   * The new index is provided on the callback\n   * @param index\n   */\n  onSettle?: (index: number) => void;\n  /**\n   * Animated value that tracks the position of the drawer, being:\n   * 0 => closed\n   * 1 => fully opened\n   */\n  animatedPosition?: Animated.Value<number>;\n  /**\n   * Configuration for the timing reanimated function\n   */\n  animationConfig?: {\n    duration?: number;\n    easing?: Animated.EasingFunction;\n  };\n  /**\n   * This value is useful if you want to take into consideration safe area insets\n   * when applying percentages for snapping points. We recommend using react-native-safe-area-context\n   * library for that.\n   * @see https://github.com/th3rdwave/react-native-safe-area-context#usage, insets.top\n   */\n  topInset: number;\n  /**\n   * Reference to FlatList, ScrollView or SectionList in order to execute its imperative methods.\n   */\n  innerRef: RefObject<FlatList | ScrollView | SectionList>;\n  /*\n   * Style to be applied to the container.\n   */\n  containerStyle?: Animated.AnimateStyle<ViewStyle>;\n};\n\ntype Props<T> = CommonProps & (FlatListOption<T> | ScrollViewOption | SectionListOption<T>);\n\nexport class ScrollBottomSheet<T extends any> extends Component<Props<T>> {\n  static defaultProps = {\n    topInset: 0,\n    innerRef: React.createRef<AnimatedScrollableComponent>(),\n  };\n  /**\n   * Gesture Handler references\n   */\n  private masterDrawer = React.createRef<TapGestureHandler>();\n  private drawerHandleRef = React.createRef<PanGestureHandler>();\n  private drawerContentRef = React.createRef<PanGestureHandler>();\n  private scrollComponentRef = React.createRef<NativeViewGestureHandler>();\n\n  /**\n   * ScrollView prop\n   */\n  private onScrollBeginDrag: ScrollViewProps['onScrollBeginDrag'];\n  /**\n   * Pan gesture handler events for drawer handle and content\n   */\n  private onHandleGestureEvent: PanGestureHandlerProperties['onGestureEvent'];\n  private onDrawerGestureEvent: PanGestureHandlerProperties['onGestureEvent'];\n  /**\n   * Main Animated Value that drives the top position of the UI drawer at any point in time\n   */\n  private translateY: Animated.Node<number>;\n  /**\n   * Animated value that keeps track of the position: 0 => closed, 1 => opened\n   */\n  private position: Animated.Node<number>;\n  /**\n   * Flag to indicate imperative snapping\n   */\n  private isManuallySetValue: Animated.Value<number> = new Value(0);\n  /**\n   * Manual snapping amount\n   */\n  private manualYOffset: Animated.Value<number> = new Value(0);\n  /**\n   * Keeps track of the current index\n   */\n  private nextSnapIndex: Animated.Value<number>;\n  /**\n   * Deceleration rate of the scroll component. This is used only on Android to\n   * compensate the unexpected glide it gets sometimes.\n   */\n  private decelerationRate: Animated.Value<number>;\n  private prevSnapIndex = -1;\n  private dragY = new Value(0);\n  private prevDragY = new Value(0);\n  private tempDestSnapPoint = new Value(0);\n  private isAndroid = new Value(Number(Platform.OS === 'android'));\n  private animationClock = new Clock();\n  private animationPosition = new Value(0);\n  private animationFinished = new Value(0);\n  private animationFrameTime = new Value(0);\n  private velocityY = new Value(0);\n  private lastStartScrollY: Animated.Value<number> = new Value(0);\n  private prevTranslateYOffset: Animated.Value<number>;\n  private translationY: Animated.Value<number>;\n  private destSnapPoint = new Value(0);\n\n  private lastSnap: Animated.Value<number>;\n  private dragWithHandle = new Value(0);\n  private scrollUpAndPullDown = new Value(0);\n  private didGestureFinish: Animated.Node<0 | 1>;\n  private didScrollUpAndPullDown: Animated.Node<number>;\n  private setTranslationY: Animated.Node<number>;\n  private extraOffset: Animated.Node<number>;\n  private calculateNextSnapPoint: (i?: number) => number | Animated.Node<number>;\n\n  private scrollComponent: React.ComponentType<\n    FlatListProps<T> | ScrollViewProps | SectionListProps<T>\n  >;\n\n  convertPercentageToDp = (str: string) =>\n    (Number(str.split('%')[0]) * (windowHeight - this.props.topInset)) / 100;\n\n  constructor(props: Props<T>) {\n    super(props);\n    const { initialSnapIndex, animationConfig } = props;\n    const animationDuration = animationConfig?.duration || DEFAULT_ANIMATION_DURATION;\n\n    const ScrollComponent = this.getScrollComponent();\n    // @ts-ignore\n    this.scrollComponent = Animated.createAnimatedComponent(ScrollComponent);\n\n    const snapPoints = this.getNormalisedSnapPoints();\n    const openPosition = snapPoints[0];\n    const closedPosition = snapPoints[snapPoints.length - 1];\n    const initialSnap = snapPoints[initialSnapIndex];\n    this.nextSnapIndex = new Value(initialSnapIndex);\n\n    const initialDecelerationRate = Platform.select({\n      android: props.initialSnapIndex === 0 ? ANDROID_NORMAL_DECELERATION_RATE : 0,\n      ios: IOS_NORMAL_DECELERATION_RATE,\n    });\n    this.decelerationRate = new Value(initialDecelerationRate);\n\n    const handleGestureState = new Value<GestureState>(-1);\n    const handleOldGestureState = new Value<GestureState>(-1);\n    const drawerGestureState = new Value<GestureState>(-1);\n    const drawerOldGestureState = new Value<GestureState>(-1);\n\n    const lastSnapInRange = new Value(1);\n    this.prevTranslateYOffset = new Value(initialSnap);\n    this.translationY = new Value(initialSnap);\n\n    this.lastSnap = new Value(initialSnap);\n\n    this.onHandleGestureEvent = event([\n      {\n        nativeEvent: {\n          translationY: this.dragY,\n          oldState: handleOldGestureState,\n          state: handleGestureState,\n          velocityY: this.velocityY,\n        },\n      },\n    ]);\n    this.onDrawerGestureEvent = event([\n      {\n        nativeEvent: {\n          translationY: this.dragY,\n          oldState: drawerOldGestureState,\n          state: drawerGestureState,\n          velocityY: this.velocityY,\n        },\n      },\n    ]);\n    this.onScrollBeginDrag = event([\n      {\n        nativeEvent: {\n          contentOffset: { y: this.lastStartScrollY },\n        },\n      },\n    ]);\n\n    const didHandleGestureBegin = eq(handleGestureState, GestureState.ACTIVE);\n\n    const isAnimationInterrupted = and(\n      or(eq(handleGestureState, GestureState.BEGAN), eq(drawerGestureState, GestureState.BEGAN)),\n      clockRunning(this.animationClock)\n    );\n\n    this.didGestureFinish = or(\n      and(eq(handleOldGestureState, GestureState.ACTIVE), eq(handleGestureState, GestureState.END)),\n      and(eq(drawerOldGestureState, GestureState.ACTIVE), eq(drawerGestureState, GestureState.END))\n    );\n\n    // Function that determines if the last snap point is in the range {snapPoints}\n    // In the case of interruptions in the middle of an animation, we'll get\n    // lastSnap values outside the range\n    const isLastSnapPointInRange = (i: number = 0): Animated.Node<number> =>\n      i === snapPoints.length\n        ? lastSnapInRange\n        : cond(\n            eq(this.lastSnap, snapPoints[i]),\n            [set(lastSnapInRange, 1)],\n            isLastSnapPointInRange(i + 1)\n          );\n\n    const scrollY = [\n      set(lastSnapInRange, 0),\n      isLastSnapPointInRange(),\n      cond(\n        or(\n          didHandleGestureBegin,\n          and(this.isManuallySetValue, not(eq(this.manualYOffset, snapPoints[0])))\n        ),\n        [set(this.dragWithHandle, 1), 0]\n      ),\n      cond(\n        // This is to account for a continuous scroll on the drawer from a snap point\n        // Different than top, bringing the drawer to the top position, so that if we\n        // change scroll direction without releasing the gesture, it doesn't pull down the drawer again\n        and(\n          eq(this.dragWithHandle, 1),\n          greaterThan(snapPoints[0], add(this.lastSnap, this.dragY)),\n          and(not(eq(this.lastSnap, snapPoints[0])), lastSnapInRange)\n        ),\n        [set(this.lastSnap, snapPoints[0]), set(this.dragWithHandle, 0), this.lastStartScrollY],\n        cond(eq(this.dragWithHandle, 1), 0, this.lastStartScrollY)\n      ),\n    ];\n\n    this.didScrollUpAndPullDown = cond(\n      and(greaterOrEq(this.dragY, this.lastStartScrollY), greaterThan(this.lastStartScrollY, 0)),\n      set(this.scrollUpAndPullDown, 1)\n    );\n\n    this.setTranslationY = cond(\n      and(not(this.dragWithHandle), not(greaterOrEq(this.dragY, this.lastStartScrollY))),\n      set(this.translationY, sub(this.dragY, this.lastStartScrollY)),\n      set(this.translationY, this.dragY)\n    );\n\n    this.extraOffset = cond(eq(this.scrollUpAndPullDown, 1), this.lastStartScrollY, 0);\n    const endOffsetY = add(this.lastSnap, this.translationY, multiply(DRAG_TOSS, this.velocityY));\n\n    this.calculateNextSnapPoint = (i = 0): Animated.Node<number> | number =>\n      i === snapPoints.length\n        ? this.tempDestSnapPoint\n        : cond(\n            greaterThan(\n              abs(sub(this.tempDestSnapPoint, endOffsetY)),\n              abs(sub(add(snapPoints[i], this.extraOffset), endOffsetY))\n            ),\n            [\n              set(this.tempDestSnapPoint, add(snapPoints[i], this.extraOffset)),\n              set(this.nextSnapIndex, i),\n              this.calculateNextSnapPoint(i + 1),\n            ],\n            this.calculateNextSnapPoint(i + 1)\n          );\n\n    const runTiming = ({ clock, from, to, position, finished, frameTime }: TimingParams) => {\n      const state = {\n        finished,\n        position,\n        time: new Value(0),\n        frameTime,\n      };\n\n      const animationParams = {\n        duration: animationDuration,\n        easing: animationConfig?.easing || DEFAULT_EASING,\n      };\n\n      const config = {\n        toValue: new Value(0),\n        ...animationParams,\n      };\n\n      return [\n        cond(and(not(clockRunning(clock)), not(eq(finished, 1))), [\n          // If the clock isn't running, we reset all the animation params and start the clock\n          set(state.finished, 0),\n          set(state.time, 0),\n          set(state.position, from),\n          set(state.frameTime, 0),\n          set(config.toValue, to),\n          startClock(clock),\n        ]),\n        // We run the step here that is going to update position\n        timing(clock, state, config),\n        cond(\n          state.finished,\n          [\n            call([this.nextSnapIndex], ([value]) => {\n              if (value !== this.prevSnapIndex) {\n                this.props.onSettle?.(value);\n              }\n              this.prevSnapIndex = value;\n            }),\n            // Resetting appropriate values\n            set(drawerOldGestureState, GestureState.END),\n            set(handleOldGestureState, GestureState.END),\n            set(this.prevTranslateYOffset, state.position),\n            cond(eq(this.scrollUpAndPullDown, 1), [\n              set(this.prevTranslateYOffset, sub(this.prevTranslateYOffset, this.lastStartScrollY)),\n              set(this.lastStartScrollY, 0),\n              set(this.scrollUpAndPullDown, 0),\n            ]),\n            cond(eq(this.destSnapPoint, snapPoints[0]), [set(this.dragWithHandle, 0)]),\n            set(this.isManuallySetValue, 0),\n            set(this.manualYOffset, 0),\n            stopClock(clock),\n            this.prevTranslateYOffset,\n          ],\n          // We made the block return the updated position,\n          state.position\n        ),\n      ];\n    };\n\n    const translateYOffset = cond(\n      isAnimationInterrupted,\n      [\n        // set(prevTranslateYOffset, animationPosition) should only run if we are\n        // interrupting an animation when the drawer is currently in a different\n        // position than the top\n        cond(\n          or(this.dragWithHandle, greaterOrEq(abs(this.prevDragY), this.lastStartScrollY)),\n          set(this.prevTranslateYOffset, this.animationPosition)\n        ),\n        set(this.animationFinished, 1),\n        set(this.translationY, 0),\n        // Resetting appropriate values\n        set(drawerOldGestureState, GestureState.END),\n        set(handleOldGestureState, GestureState.END),\n        // By forcing that frameTime exceeds duration, it has the effect of stopping the animation\n        set(this.animationFrameTime, add(animationDuration, 1000)),\n        stopClock(this.animationClock),\n        this.prevTranslateYOffset,\n      ],\n      cond(\n        or(this.didGestureFinish, this.isManuallySetValue, clockRunning(this.animationClock)),\n        [\n          runTiming({\n            clock: this.animationClock,\n            from: cond(\n              this.isManuallySetValue,\n              this.prevTranslateYOffset,\n              add(this.prevTranslateYOffset, this.translationY)\n            ),\n            to: this.destSnapPoint,\n            position: this.animationPosition,\n            finished: this.animationFinished,\n            frameTime: this.animationFrameTime,\n          }),\n        ],\n        [\n          set(this.animationFrameTime, 0),\n          set(this.animationFinished, 0),\n          // @ts-ignore\n          this.prevTranslateYOffset,\n        ]\n      )\n    );\n\n    this.translateY = interpolate(add(translateYOffset, this.dragY, multiply(scrollY, -1)), {\n      inputRange: [openPosition, closedPosition],\n      outputRange: [openPosition, closedPosition],\n      extrapolate: Extrapolate.CLAMP,\n    });\n\n    this.position = interpolate(this.translateY, {\n      inputRange: [openPosition, closedPosition],\n      outputRange: [1, 0],\n      extrapolate: Extrapolate.CLAMP,\n    });\n  }\n\n  private getNormalisedSnapPoints = () => {\n    return this.props.snapPoints.map(p => {\n      if (typeof p === 'string') {\n        return this.convertPercentageToDp(p);\n      } else if (typeof p === 'number') {\n        return p;\n      }\n\n      throw new Error(\n        `Invalid type for value ${p}: ${typeof p}. It should be either a percentage string or a number`\n      );\n    });\n  };\n\n  private getScrollComponent = () => {\n    switch (this.props.componentType) {\n      case 'FlatList':\n        return FlatList;\n      case 'ScrollView':\n        return ScrollView;\n      case 'SectionList':\n        return SectionList;\n      default:\n        throw new Error(\n          'Component type not supported: it should be one of `FlatList`, `ScrollView` or `SectionList`'\n        );\n    }\n  };\n\n  snapTo = (index: number) => {\n    const snapPoints = this.getNormalisedSnapPoints();\n    this.isManuallySetValue.setValue(1);\n    this.manualYOffset.setValue(snapPoints[index]);\n    this.nextSnapIndex.setValue(index);\n  };\n\n  render() {\n    const {\n      renderHandle,\n      snapPoints,\n      initialSnapIndex,\n      componentType,\n      onSettle,\n      animatedPosition,\n      containerStyle,\n      ...rest\n    } = this.props;\n    const AnimatedScrollableComponent = this.scrollComponent;\n    const normalisedSnapPoints = this.getNormalisedSnapPoints();\n    const initialSnap = normalisedSnapPoints[initialSnapIndex];\n\n    const Content = (\n      <Animated.View\n        style={[\n          StyleSheet.absoluteFill,\n          containerStyle,\n          // @ts-ignore\n          {\n            transform: [{ translateY: this.translateY }],\n          },\n        ]}>\n        <PanGestureHandler\n          ref={this.drawerHandleRef}\n          shouldCancelWhenOutside={false}\n          simultaneousHandlers={this.masterDrawer}\n          onGestureEvent={this.onHandleGestureEvent}\n          onHandlerStateChange={this.onHandleGestureEvent}>\n          <Animated.View>{renderHandle()}</Animated.View>\n        </PanGestureHandler>\n        <PanGestureHandler\n          ref={this.drawerContentRef}\n          simultaneousHandlers={[this.scrollComponentRef, this.masterDrawer]}\n          shouldCancelWhenOutside={false}\n          onGestureEvent={this.onDrawerGestureEvent}\n          onHandlerStateChange={this.onDrawerGestureEvent}>\n          <Animated.View style={styles.container}>\n            <NativeViewGestureHandler\n              ref={this.scrollComponentRef}\n              waitFor={this.masterDrawer}\n              simultaneousHandlers={this.drawerContentRef}>\n              <AnimatedScrollableComponent\n                overScrollMode=\"never\"\n                bounces={false}\n                {...rest}\n                ref={this.props.innerRef}\n                // @ts-ignore\n                decelerationRate={this.decelerationRate}\n                onScrollBeginDrag={this.onScrollBeginDrag}\n                scrollEventThrottle={1}\n                contentContainerStyle={[\n                  rest.contentContainerStyle,\n                  { paddingBottom: this.getNormalisedSnapPoints()[0] },\n                ]}\n              />\n            </NativeViewGestureHandler>\n          </Animated.View>\n        </PanGestureHandler>\n        {this.props.animatedPosition && (\n          <Animated.Code\n            exec={onChange(this.position, set(this.props.animatedPosition, this.position))}\n          />\n        )}\n        <Animated.Code\n          exec={onChange(this.dragY, cond(not(eq(this.dragY, 0)), set(this.prevDragY, this.dragY)))}\n        />\n        <Animated.Code\n          exec={onChange(\n            this.didGestureFinish,\n            cond(this.didGestureFinish, [\n              this.didScrollUpAndPullDown,\n              this.setTranslationY,\n              set(this.tempDestSnapPoint, add(normalisedSnapPoints[0], this.extraOffset)),\n              set(this.nextSnapIndex, 0),\n              set(this.destSnapPoint, this.calculateNextSnapPoint()),\n              cond(\n                and(\n                  greaterThan(this.dragY, this.lastStartScrollY),\n                  this.isAndroid,\n                  not(this.dragWithHandle)\n                ),\n                call([], () => {\n                  // This prevents the scroll glide from happening on Android when pulling down with inertia.\n                  // It's not perfect, but does the job for now\n                  const { method, args } = imperativeScrollOptions[this.props.componentType];\n                  // @ts-ignore\n                  this.props.innerRef.current?.getNode()[method](args);\n                })\n              ),\n              set(this.dragY, 0),\n              set(this.velocityY, 0),\n              set(\n                this.lastSnap,\n                sub(\n                  this.destSnapPoint,\n                  cond(eq(this.scrollUpAndPullDown, 1), this.lastStartScrollY, 0)\n                )\n              ),\n              call([this.lastSnap], ([value]) => {\n                // This is the TapGHandler trick\n                // @ts-ignore\n                this.masterDrawer?.current?.setNativeProps({\n                  maxDeltaY: value - this.getNormalisedSnapPoints()[0],\n                });\n              }),\n              set(\n                this.decelerationRate,\n                cond(\n                  eq(this.isAndroid, 1),\n                  cond(\n                    eq(this.lastSnap, normalisedSnapPoints[0]),\n                    ANDROID_NORMAL_DECELERATION_RATE,\n                    0\n                  ),\n                  IOS_NORMAL_DECELERATION_RATE\n                )\n              ),\n            ])\n          )}\n        />\n        <Animated.Code\n          exec={onChange(this.isManuallySetValue, [\n            cond(\n              this.isManuallySetValue,\n              [\n                set(this.destSnapPoint, this.manualYOffset),\n                set(this.animationFinished, 0),\n                set(this.lastSnap, this.manualYOffset),\n                call([this.lastSnap], ([value]) => {\n                  // This is the TapGHandler trick\n                  // @ts-ignore\n                  this.masterDrawer?.current?.setNativeProps({\n                    maxDeltaY: value - this.getNormalisedSnapPoints()[0],\n                  });\n                }),\n              ],\n              [set(this.nextSnapIndex, 0)]\n            ),\n          ])}\n        />\n      </Animated.View>\n    );\n\n    // On Android, having an intermediary view with pointerEvents=\"box-none\", breaks the\n    // waitFor logic\n    if (Platform.OS === 'android') {\n      return (\n        <TapGestureHandler\n          maxDurationMs={100000}\n          ref={this.masterDrawer}\n          maxDeltaY={initialSnap - this.getNormalisedSnapPoints()[0]}\n          shouldCancelWhenOutside={false}>\n          {Content}\n        </TapGestureHandler>\n      );\n    }\n\n    // On iOS, We need to wrap the content on a view with PointerEvents box-none\n    // So that we can start scrolling automatically when reaching the top without\n    // Stopping the gesture\n    return (\n      <TapGestureHandler\n        maxDurationMs={100000}\n        ref={this.masterDrawer}\n        maxDeltaY={initialSnap - this.getNormalisedSnapPoints()[0]}>\n        <View style={StyleSheet.absoluteFillObject} pointerEvents=\"box-none\">\n          {Content}\n        </View>\n      </TapGestureHandler>\n    );\n  }\n}\n\nexport default ScrollBottomSheet;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}